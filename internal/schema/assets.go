// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xac\x6c\x8f\x5d\xd2\x5b\x25\x6e\xa8\x97\x1e\x7b\xaf\xf6\xe0\x8d\x0d\x78\x05\x4e\x6a\x4f\x2a\xad\x56\xfc\xf7\x8a\x98\x38\x71\xfc\x01\x26\x0e\x9b\x6a\x37\x07\x24\xc6\xce\x78\x66\x3c\x6f\xde\x83\xb7\x05\x42\x08\x65\x5f\x64\xb1\xa3\x07\x9c\xad\x50\xb6\x03\xa8\x56\x79\xfe\x22\x4b\xfe\xa8\xac\xcb\x52\x6c\x73\x22\xf0\x06\x1e\xbf\x7d\xcf\x95\xed\x21\xfb\xaa\xde\x14\xf4\x4f\xcd\x04\x25\xd9\x0a\xfd\x6e\x2c\x8d\x95\xe3\x03\x3d\xef\x68\xbe\xc3\x6b\x65\x7c\xff\x4b\x85\x64\x25\xef\x9b\x08\x95\x85\x60\x15\x0c\xcc\xec\x50\x95\x02\x64\xdf\x54\x89\xb2\xa2\x02\x18\x35\xac\xc5\x0e\x73\x4e\xf7\x86\x0d\x04\xdb\x6e\xa9\x30\x6c\x82\xca\xb2\x16\x85\xf9\x32\x2e\x4e\xe7\xca\xac\xb1\x3c\x9d\x53\xeb\x9d\xb3\x42\x6f\xf6\xe6\xbe\x51\xc5\x0a\xf4\x60\x9b\xc7\x15\xd8\xf4\x22\xe8\xe6\xe4\xe2\x21\x27\x74\xc3\x38\x6b\xe2\xc8\x55\x3c\xcb\x1f\x25\xdf\xb0\x6d\x66\xbc\x75\x34\x9d\xa8\x7b\x58\xa1\x0c\x0b\x81\x5f\xbb\xad\x47\x57\x1d\x63\xd2\x6b\xfd\x4a\x10\x8c\x8f\x8f\xa1\xdf\x0b\x56\x18\xbe\xb3\x8e\x8e\xae\x79\xc7\x1c\x1a\x08\xdc\x14\xbc\xa7\xef\x2e\xc5\x3f\x65\x8b\x11\x0c\x78\xb9\x06\x10\xec\xb9\x06\x3a\xba\x36\x1d\x06\xe7\x92\x60\x1b\x51\x2a\x14\xe9\xc9\x33\x97\x04\xcf\x01\x25\xcb\x4f\x6d\xb9\xa1\xbb\xdb\xd1\x7f\xfd\xcb\x8b\x9e\x8b\x0c\x13\xd2\x64\x84\xf7\xbf\xfa\x30\xd9\xe0\xbd\xa4\xe7\x2d\xad\xa3\xf2\xf9\x85\x16\xd0\x12\x55\xaf\x18\xe6\x38\x5f\xda\xa1\x38\x49\x4d\xaf\x0e\xc8\xcd\x4c\xc0\x61\xb7\xc9\x4e\x2f\xb9\x49\x4f\x2f\xdb\xe4\xa7\x97\x9c\x24\xa8\x57\x1d\x64\xd8\x85\x69\x93\x62\x2f\x71\x9b\x1c\xf5\xa2\x41\x92\xed\xf3\x34\xe8\x9d\xc0\xf0\x42\x21\xf2\xec\x72\xf6\xe2\x43\x6f\x49\x82\x93\xce\x5b\x2c\xa9\xb6\xcf\xd1\xed\xd4\x07\x9f\xc0\x6b\x7e\xd2\x8d\x29\x4b\x88\xc0\x26\x88\x39\x44\xd2\x57\xc7\xe4\x72\xec\x23\xef\x6e\xc3\xec\x6a\xe1\x24\xfb\xab\x83\x71\x79\xbc\x80\x23\x34\x23\xa8\x84\xc4\x41\x20\x45\x74\x63\xad\xfd\xe2\x61\x6e\x85\x09\x8a\x8a\x09\x2a\xe3\x15\x1d\x73\x2b\x4c\x48\x8c\x4c\x51\x17\x97\x58\xb1\x1c\xc6\xa0\xd3\x27\x62\xae\x77\x1a\x14\x60\x97\x45\x8e\x75\xd0\x59\xec\x38\x25\x97\xc9\x65\x91\x6a\xe7\x74\x81\x11\x62\x47\x52\x00\xc6\xb7\x4e\x01\xc1\x88\x53\x03\x61\xc0\xe3\x34\x45\xe3\xe1\xe2\x55\x0c\x2b\xd4\x3e\x4e\x0a\x22\x69\xfb\x45\xa1\x20\xa1\x43\x5d\xe6\xa4\x69\x8f\x04\xca\x3d\x7b\x7a\x40\x3a\x56\x53\x27\x3e\x6e\x38\xca\x23\x41\xf4\x41\x3a\xff\x9e\x0d\xd0\x72\xc8\xba\x19\x6e\x73\x9e\x6d\x0e\xfb\x7a\x78\x1d\xb1\x17\x7f\x72\xe0\xbd\x27\x4f\xa5\x41\xd4\xf4\x02\xa9\xc6\x74\xca\xcc\x7a\xcf\xe5\x2f\xf1\xd0\x65\xbc\xaa\x03\x65\xbf\x25\xe5\xb2\x86\xe4\x3e\x3f\xc9\x66\xaa\x59\x93\x72\xf8\xfb\x86\x8c\x67\x26\x85\x66\xcf\x0e\x73\xb2\x3f\xe9\xfe\x51\x23\x45\x7b\xf9\x5f\x7e\x3d\xfc\x54\x01\xdf\xe9\x47\xc4\xa7\x24\xbc\x25\xce\xf7\x40\xa9\xd9\x17\x91\x60\x0d\xe1\xec\x43\xfd\x01\xea\xd4\x57\x53\x83\x2c\xfd\xff\x68\x09\x50\x31\x79\x0f\x2f\xd4\xe7\xf1\x5f\x00\x00\x00\xff\xff\x74\xac\x4c\xb6\x8d\x1f\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 8077, mode: os.FileMode(436), modTime: time.Unix(1547818534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

